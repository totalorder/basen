#!/usr/bin/env bash
cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}"))")" || exit
source include/common.sh

CONTAINER_IDS=$(docker-compose -f compose/swarmhost.yml -f compose/swarmhost-node.yml ps --filter state=up -q)
echo "### NODES ###"
for CONTAINER_ID in ${CONTAINER_IDS}; do
    INSPECT=$(docker inspect ${CONTAINER_ID})
    STATUS=$(echo ${INSPECT} | jq -r '.[].State.Status')

    if [ ${STATUS} != "running" ]; then
        NODE="localhost:????"
        echo "=== $NODE ==="
        echo "$STATUS"
    else
        NODE="localhost:$(echo ${INSPECT} | jq -r '.[].NetworkSettings.Ports["2375/tcp"][].HostPort')"
        echo "=== $NODE ==="
        timeout 2 echo "$(on_node ${NODE} node ps 2> /dev/null | grep -v "tinytools" | awk '{ print $6 "\t" $2 }')"
    fi
    echo "----$(printf %${#NODE}s | tr " " "-")----"
done

PORTS=$(docker inspect $(docker-compose -f compose/swarmhost.yml -f compose/swarmhost-node.yml ps -q | head -n 1) | jq '.[].NetworkSettings.Ports')

echo ""
echo "### REGISTRY ###"
REGISTRY_PORT=$(echo "$PORTS" | jq -r 2> /dev/null '.["5000/tcp"][].HostPort')
if [[ "$(curl -w '%{http_code}' -s "http://localhost:${REGISTRY_PORT}/v2/_catalog" --output /dev/null)" == "200" ]]; then
    echo "http://localhost:${REGISTRY_PORT} running"
else
    echo "http://localhost:${REGISTRY_PORT} down"
fi
echo "----------------"

echo ""
echo "### ETCD ###"
if [[ "$(curl -w '%{http_code}' -s http://localhost:2379/health --output /dev/null)" == "200" ]]; then
    echo "http://localhost:2379 running"
else
    echo "http://localhost:2379 down"
fi
echo "------------"


echo ""
echo "### POSTGRES ###"
for TASK in $(tinytools dig +short postgres 2> /dev/null | sort); do
    TASK=$(echo ${TASK} | sed s/[^0-9\.]//g)
    JSON=$(tinytools curl http://${TASK}:8008 2> /dev/null)
    echo "$TASK $(echo ${JSON} | jq -r '.state') $(echo ${JSON} | jq -r '.role') "
done
echo "----------------"

echo ""
echo "### HAPROXY ###"
if [[ "$(curl -w '%{http_code}' -s http://localhost:7000 --output /dev/null)" == "200" ]]; then
    echo "http://localhost:7000 running"
else
    echo "http://localhost:7000 down"
fi
echo "---------------"


echo ""
echo "### APP ###"
if [[ "$(curl -w '%{http_code}' -s http://localhost:8000/user --output /dev/null)" == "200" ]]; then
    echo "http://localhost:8000 running"
else
    echo "http://localhost:8000 down"
fi
echo "-----------"
